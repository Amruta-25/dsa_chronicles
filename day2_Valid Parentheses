
// attempt 1--- code workd but has quite redundant logic.....
// class Solution {
// public:
//     bool isValid(string s) {
//       stack<char> stack;
//       int n = s.size();
//       if(s[0]==')'||s[0]=='}'||s[0]==']'){
//         return false;
//       }
      
//       stack.push(s[0]);
//       for(int i =1; i<n; i++){
//          if(s[i]=='(' || s[i]=='{' || s[i]=='['){
//             stack.push(s[i]);
//             continue;
//          }
//          else if(stack.empty()){
//             return false;
//          }
//          else if(s[i]==')' && !s.empty() && stack.top()!='('){
//             return false;
//          }
//          else if(s[i]==')' && !s.empty() && stack.top()=='('){
//             stack.pop();
//             continue;
//          }
//          else if(s[i]=='}' && !s.empty() && stack.top()!='{'){
//             return false;
//          }
//          else if(s[i]=='}' && !s.empty() && stack.top()=='{'){
//             stack.pop();
//             continue;
//          }
//          else if(s[i]==']' && !s.empty() && stack.top()!='['){
//             return false;
//          }
//          else if(s[i]==']' && !s.empty() && stack.top()=='['){
//             stack.pop();
//             continue;
//          }
//       }
//     //   cout << stack.top();
//       if (stack.empty()){
//         return true;  
//       }
//       else{
//         return false;
//       }
//     }
// };

class Solution {
public:
    bool isValid(string s) {
       

        stack<char> stack;
        int n = s.size();

        for(int i =0; i<n; i++){
            char a = s[i];
            if(a=='(' || a=='{'|| a =='['){
                stack.push(a);
                continue;
            }
            else {
                if(stack.empty()){
                    return false;
                }
                else{
                    if((a==')' && stack.top()!='(' )
                    || (a=='}' && stack.top()!='{')
                    || (a==']' && stack.top()!='[') ){
                        return false;
                        }

                        stack.pop();
                    

                }

            }
        }

        return stack.empty();
    }
};
